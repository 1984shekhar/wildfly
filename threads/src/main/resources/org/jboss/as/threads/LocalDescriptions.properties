threads=The threading subsystem, used to declare manageable thread pools and resources.
threads.add=Adds the threading subsystem.

threadfactories=A set of thread factories.

threadfactory=A thread factory (implementing java.util.concurrent.ThreadFactory).
threadfactory.add=Adds a thread factory
threadfactory.name=The bean name of the created thread factory.
threadfactory.groupname=Specifies the name of a the thread group to create for this thread factory.
threadfactory.threadnamepattern=The template used to create names for threads.  The following patterns may be used:\n\t%% - emit a percent sign\n\t%t - emit the per-factory thread sequence number\n\t%g - emit the global thread sequence number\n\t%f - emit the factory sequence number\n\t%i - emit the thread ID.
threadfactory.priority=May be used to specify the thread priority of created threads.
threadfactory.properties=Extra properties for configuration.
threadfactory.remove=Adds a thread factory

threadpool.common.name=The name of the thread factory
threadpool.common.threadfactory=Specifies the bean name of a specific thread factory to use to create worker threads.
threadpool.common.properties=Extra properties for configuration.
threadpool.common.maxthreadscount=Specifies a flat quantity. Used with max-threads-per-cpu to determine the maximum thread pool size.
threadpool.common.maxthreadspercpu=Specifies a quantity per available CPU, as determined by java.lang.Runtime#availableProcessors(). Added together with max-threads-count and rounded off  to an integer value to determine the maximum thread pool size.
threadpool.common.keepaliveduration=Used to specify the amount of time that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
threadpool.common.keepaliveunit=The time unit for the number specified in keepalive-time-duration.

threadpool.bounded=A set of bounded queue thread pools.
threadpool.bounded.add=Adds a bounded queue thread pool.
threadpool.bounded.description=A thread pool executor with a bounded queue.  Such a thread pool has a core and maximum size and a specified queue length.  When a task is submitted, if the number of running threads is less than the core size, a new thread is created.  Otherwise, if there is room in the queue, the task is enqueued. Otherwise, if the number of running threads is less than the maximum size, a new thread is created. Otherwise, if blocking is enabled, the caller blocks until room becomes available in the queue. Otherwise, the task is handed off to the designated handoff executor, if one is specified.  Otherwise, the task is rejected.
threadpool.bounded.allowcoretimeout=Whether core threads may time out.
threadpool.bounded.blocking=Whether the submitter thread will block if no space is available in this executor.
threadpool.bounded.corethreadscount=Specifies a flat quantity. Used with core-threads-per-cpu to determine the core thread pool size.
threadpool.bounded.corethreadspercpu=Specifies a quantity per available CPU, as determined by java.lang.Runtime#availableProcessors(). Added together with core-threads-count and rounded off  to an integer value to determine the core thread pool size which is smaller than the maximum pool size.
threadpool.bounded.handoffexecutor=An executor to delegate tasks to in the event that a task cannot be accepted.
threadpool.bounded.queuelengthcount=Specifies a flat quantity. Used with queue-length-per-cpu to determine the queue length.
threadpool.bounded.queuelengthpercpu=Specifies a quantity per available CPU, as determined by java.lang.Runtime#availableProcessors(). Added together with queue-length-per-cpu and rounded off  to an integer value to determine the queue length.
threadpool.bounded.remove=Removes a bounded queue thread pool.

threadpool.queueless=A set of queueless thread pools.
threadpool.queueless.add=Adds a queueless thread pool.
threadpool.queueless.description=A thread pool executor with no queue.  When a task is submitted, if the number of running threads is less than the maximum size, a new thread is created.  Otherwise, if blocking is enabled, the caller blocks until another thread completes its task and accepts the new one.  Otherwise, the task is handed off to the designated handoff executor, if one is specified.  Otherwise, the task is rejected.
threadpool.queueless.blocking=Whether the submitter thread will block if no space is available in this executor.
threadpool.queueless.handoffexecutor=An executor to delegate tasks to in the event that a task cannot be accepted.
threadpool.queueless.remove=Removes a queueless thread pool.

threadpool.scheduled=A set of scheduled thread pools
threadpool.scheduled.add=Adds a queueless thread pool.
threadpool.scheduled.description=A scheduled thread pool executor.
threadpool.scheduled.remove=Removes a queueless thread pool.

threadpool.unbounded=A set of unbounded queue thread pools
threadpool.unbounded.add=Adds an unbounded thread pool.
threadpool.unbounded.description=A thread pool executor with an unbounded queue.  Such a thread pool has a core size and a queue with no upper bound.  When a task is submitted, if the number of running threads is less than the core size, a new thread is created.  Otherwise, the task is placed in queue.  If too many tasks are allowed to be submitted to this type of executor, an out of memory condition may occur.
threadpool.unbounded.remove=Removes an unbounded thread pool.

