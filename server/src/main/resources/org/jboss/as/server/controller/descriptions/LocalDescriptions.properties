# Server root
server=The root node of the server-level management model.
server.name=The name of this server. If not set, defaults to the runtime value of InetAddress.getLocalHost().getHostName().
server.extension=A list of extension modules.
server.path=A list of named filesystem paths.
server.management=Specifies the enabled management protocols for the server
server.profile=The name of the server's configuration profile.
server.subsystem=The subsystems that make up the server's profile.
server.interface=A list of named network interfaces available for use on the server.
server.socket-binding=A list of socket bindings available for use on the server.
server.system-property=A list of system properties to set on the server.
server.deployment=A list of deployments available for use on the server.

# Deployments
deployment=A deployment represents anything that can be deployed (e.g. an application such as EJB-JAR, WAR, EAR, any kind of standard archive such as RAR or JBoss-specific deployment) into a server.
deployment.name=Unique identifier of the deployment. Must be unique across all deployments.
deployment.runtime-name=Name by which the deployment should be known within a server's runtime. This would be equivalent to the file name of a deployment file, and would form the basis for such things as default Java Enterprise Edition application and module names. This would typically be the same as 'name', but in some cases users may wish to have two deployments with the same 'runtime-name' (e.g. two versions of "foo.war") both available in the deployment content repository, in which case the deployments would need to have distinct 'name' values but would have the same 'runtime-name'.
deployment.hash=The hash of the deployment content.
deployment.start=Boolean indicating whether the deployment content is currently deployed in the runtime (or should be deployed in the runtime the next time the server starts.)
deployment.upload-bytes=Indicates that the deployment content in the included byte array should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.bytes=Byte array containing the deployment content.
deployment.upload-url=Indicates that the deployment content available at the included URL should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.upload-stream=Indicates that the deployment content available at the included input stream index should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.url=The URL at which the deployment content is available. Note that the URL must be accessible from the target of the opeartion.
deployment.add=Adds previously uploaded content to the list of content available for use. Does not actually deploy the content.
deployment.deploy=Deploy the specified deployment content into the runtime, without replacing existing content.
deployment.replace=Replace existing content in the runtime with new content. The new content must have been previously uploaded to the deployment content repository.
deployment.replace.name=The name of the new content.
deployment.replace.to-replace=The name of the content that is to be replaced.
deployment.full-replace=Add previously uploaded deployment content to the list of content available for use, replace existing content of the same name in the runtime, and remove the replaced content from the deployment content repository. This is equivalent to an 'add-deployment', 'undeploy-deployment', 'deploy-deployment', 'remove-deployment' sequence where the new content has the same name as the content being replaced.
deployment.undeploy=Undeploy content from the runtime. The content remains in the deployment content repository.
deployment.redeploy=Undeploy existing content from the runtime and deploy it again.
deployment.remove=Remove content from the deployment content repository. The content must have previously been undeployed from the runtime.
deployment.stream-attachment=The index into the ExecutionContext input streams of the input stream that contains teh deployment content.


# Operations
composite=An operation that executes a list of other operations as a unit.
composite.steps=A list, where each item in the list has the same structure as a simple operation request.
composite.rollback=Whether steps that successfully execute should be reverted if other steps fail at runtime. Note that if any steps modify the persistent configuration, and any of those steps fail, all steps will be reverted. Partial/incomplete changes to the persistent configuration are not allowed. So, this flag only deals with what happens if there is a problem applying an operation to the running state of a server (e.g. actually increasing the size of a runtime thread pool.)
composite.result=A list, where each item in the list is the result for the equivalently positioned item in the 'steps' parameter list
