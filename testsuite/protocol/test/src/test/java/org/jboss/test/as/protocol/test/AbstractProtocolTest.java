/*
 * JBoss, Home of Professional Open Source.
 * Copyright 2010, Red Hat, Inc., and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.jboss.test.as.protocol.test;

import java.io.File;
import java.io.FileNotFoundException;

import org.jboss.modules.LocalModuleLoader;
import org.jboss.modules.Module;
import org.jboss.modules.ModuleIdentifier;
import org.jboss.modules.SimpleModuleLoaderSelector;
import org.jboss.test.as.protocol.test.base.BaseTest;
import org.junit.After;
import org.junit.Before;


/**
 * 
 * @author <a href="kabir.khan@jboss.com">Kabir Khan</a>
 * @version $Revision: 1.1 $
 */
public abstract class AbstractProtocolTest <T extends BaseTest>{

	static final File[] MODULE_ROOTS;
	static final LocalModuleLoader moduleLoader;
	static {
		try {
			MODULE_ROOTS = new File[2];
			File file = new File(AbstractProtocolTest.class.getResource("/").toURI());
			file = file.getParentFile().getParentFile().getParentFile().getParentFile().getParentFile();
	        file = new File(file, "build");
	        file = new File(file, "target");
	        file = new File(file, "modules");
	        if (!file.exists())
	        	throw new FileNotFoundException(file.getAbsolutePath());
	        MODULE_ROOTS[0] = file;
	        
	        file  = new File(AbstractProtocolTest.class.getResource("/").toURI()).getParentFile();
	        file = file.getParentFile().getParentFile();
	        file = new File(file, "assembly");
	        file = new File(file, "target");
	        file = new File(file, "modules");
	        if (!file.exists())
	        	throw new FileNotFoundException(file.getAbsolutePath());
	        MODULE_ROOTS[1] = file;
	        

            moduleLoader = new LocalModuleLoader(MODULE_ROOTS);
            Module.setModuleLoaderSelector(new SimpleModuleLoaderSelector(moduleLoader));	        
        } catch (Exception e) {
	        // AutoGenerated
	        throw new RuntimeException(e);
        }
	}
	
	private final Class<T> clazz;
	
	private volatile T modularizedTestInstance;
	
	public AbstractProtocolTest(Class<T> clazz) {
		this.clazz = clazz;
    }
	
	
	final T getTestInstance() throws Exception {
		if (modularizedTestInstance == null) {
			modularizedTestInstance = initializeModularizedTestInstance();
		}
		return modularizedTestInstance;
	}

	private T initializeModularizedTestInstance() throws Exception {
		LocalModuleLoader moduleLoader = new LocalModuleLoader(MODULE_ROOTS);
		Module.setModuleLoaderSelector(new SimpleModuleLoaderSelector(moduleLoader));
		ModuleIdentifier id = ModuleIdentifier.fromString("org.jboss.as.jboss-as-testsuite-protocol-modules");
		Module module = moduleLoader.loadModule(id);
		
		String realTestName = getModuleTestName();
		return module.getClassLoader().loadClass(realTestName).asSubclass(clazz).newInstance();
	}
	
	private String getModuleTestName() {
		return "org.jboss.test.as.protocol.test.module." + clazz.getSimpleName() + "Module";
	}

	@Before
	public final void beforeTest() throws Exception {
		getTestInstance().beforeTest();
	}
	
	@After
	public final void afterTest() throws Exception {
		getTestInstance().afterTest();
		modularizedTestInstance = null;
	}
}
